version: 2.1

#####################
# Common Definitions
#####################

# Orb declarations
orbs:
  win: circleci/windows@2.4.0

# Simple YAML anchors
aliases:
  - &project_dir "~/project"

commands:
  influxdb-onboarding:
    steps:
      - run:
          name: "Post onBoarding request to InfluxDB 2"
          command: sh ./scripts/influxdb-onboarding.sh

  dependencies:
    description: "Download dependencies and setup global packages"
    parameters:
      shell:
        type: string
        default: "/bin/bash --login -eo pipefail"
      pub-cache:
        type: string
        default: "~/.pub-cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.5-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
            - v1.5-dependencies-{{ arch }}-
      - run:
          name: Download deps
          shell: << parameters.shell >>
          command: dart pub get
      - run:
          name: Get junitreporter
          shell: << parameters.shell >>
          command: dart pub global activate junitreport
      - save_cache:
          key: v1.5-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
          paths:
            - .dart_tool
            - << parameters.pub-cache >>

  native-build:
    description: "Runs the dart2native command to build native executable for machine. Artifacts executable"
    parameters:
      shell:
        type: string
        default: "/bin/bash --login -eo pipefail"
    steps:
      - run:
          name: Native compile
          shell: << parameters.shell >>
          command: dart compile exe test/influxdb_client_test.dart -o unit-tests.exe

######################
# Workflow Definition
######################
workflows:
  version: 2
  build:
    jobs:
      - test:
          name: dart-2.12
          dart-image: "dart:2.12"
      - test:
          name: dart-latest
          dart-image: "dart:latest"
          influxdb-image: "influxdb:latest"
      - test:
          name: dart-latest-web
          dart-image: "google/dart:latest"
          dart-platform: "chrome"
          influxdb-image: "influxdb:latest"
      - test:
          name: dart-2.12-nightly
          dart-image: "dart:2.12"
          influxdb-image: "quay.io/influxdb/influxdb:nightly"
      - check-code-style
      - check-static-analysis
      - build-windows:
          requires:
            - dart-2.12
      - build-linux:
          requires:
            - dart-2.12

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - test:
          name: dart-latest
          dart-image: "dart:latest"
          influxdb-image: "influxdb:latest"

##################
# Job Definitions
##################
jobs:
  test:
    parameters:
      dart-image:
        type: string
        default: &default-dart-image "dart:2.12"
      dart-platform:
        type: string
        default: "vm"
      influxdb-image:
        type: string
        default: &default-influxdb-image "influxdb:latest"

    docker:
      - image: << parameters.dart-image >>
      - image: &influx-image << parameters.influxdb-image >>
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :8086
    steps:
      - dependencies:
          shell: "/bin/bash -eo pipefail"
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get -y install wget gnupg libdigest-sha-perl
      - when:
          condition:
            equal: [ 'chrome', << parameters.dart-platform >>]
          steps:
            - run:
                name: Install Google Chrome
                command: |
                  echo 'deb http://dl.google.com/linux/chrome/deb stable main' >> /etc/apt/sources.list.d/google-chrome.list
                  curl -fL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
                  apt-get update
                  apt-get install --no-install-recommends -y -q google-chrome-stable
      - influxdb-onboarding
      - run:
          name: Make folder for test results
          command: mkdir -p test-results/dart-tests
      - run:
          name: Run tests
          command: |
            export DART_TEST_CONFIG=./dart_ci_test.yaml
            dart run test --reporter json --platform << parameters.dart-platform >> --coverage=./coverage | $HOME/.pub-cache/bin/tojunit --output test-results/dart-tests/influxdb_client_test-report.xml
      - run:
          name: Collecting coverage reports
          command: |
            dart pub global activate coverage
            dart pub global run coverage:format_coverage --report-on=lib --lcov -o ./coverage/lcov.info -i ./coverage
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov -f "./coverage/lcov.info"
      - store_test_results:
          path: test-results

  check-code-style:
    docker:
      - image: "dart:latest"
    steps:
      - checkout
      - run:
          name: Check correct formatting
          command: dart format --set-exit-if-changed .

  check-static-analysis:
    docker:
      - image: "dart:latest"
    steps:
      - checkout
      - run: dart pub get
      - run:
          name: Check static analysis formatting
          command: dart analyze --fatal-infos lib

  build-windows:
    executor: win/default
    steps:
      - run:
          name: Install Dart SDK
          command: choco install dart-sdk
      - run:
          name: Install missing root certificate (GlobalSign Root CA)
          command: |
            @'
            -----BEGIN CERTIFICATE-----
            MIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG
            A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
            b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw
            MDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
            YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT
            aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ
            jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp
            xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp
            1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG
            snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ
            U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8
            9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
            BTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B
            AQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz
            yj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE
            38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP
            AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad
            DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME
            HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==
            -----END CERTIFICATE-----
            '@ > c:\globalsignca.pem
            Import-Certificate -FilePath c:\globalsignca.pem -CertStoreLocation 'Cert:Localmachine\Root'
#      - run:
#          name: Print CA
#          command: Get-ChildItem -Path Cert:Localmachine\Root | Where {$_.Subject -like "*GlobalSign*"} | FL Subject, Thumbprint, NotAfter
      - dependencies:
          shell: "powershell.exe"
          pub-cache: "~/AppData/Local/Pub/Cache"
      - native-build:
          shell: "powershell.exe"

  build-linux:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - run:
          name: Install Dart SDK
          shell: /bin/bash --login -eo pipefail
          command: |
            # Setup repo & signing key
            sudo apt update
            sudo apt install apt-transport-https
            sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
            sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'

            # Update again and install
            sudo apt update
            sudo apt install dart

            # Set PATH in profile for downstream commands
            export PATH="$PATH:/usr/lib/dart/bin"
            echo 'export PATH="$PATH:/usr/lib/dart/bin"' >> ~/.bash_profile
      - dependencies
      - native-build

